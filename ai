---main.js
//----------------------------------------------------------------------------------------------------CONFIG
let model = tf.sequential() //activation: sigmoid,relu, kernelInitializer: 'ones'
model.add(tf.layers.dense({ inputShape: [2], units: 30, activation: 'relu', useBias: true }))
model.add(tf.layers.dense({ units: 1, useBias: true }))
model.compile({ optimizer: tf.train.adam(), loss: 'meanSquaredError' })
//{ loss: 'categoricalCrossentropy', optimizer: tf.train.sgd(0.2), metrics: ['acc'] }
//----------------------------------------------------------------------------------------------------PREPARE DATA
let tensorData = tf.tidy(() => {
  let shuffledData = data.output.map((output, i) => [data.input[i], data.input2[i], output])
  tf.util.shuffle(shuffledData)
  let inputTensor = tf.tensor(shuffledData.map(el => [el[0], el[1]]))
  let outputTensor = tf.tensor(shuffledData.map(el => el[2]))
  let inputMax = inputTensor.max()
  let inputMin = inputTensor.min()
  let outputMax = outputTensor.max()
  let outputMin = outputTensor.min()
  let normalisedInput = inputTensor.sub(inputMin).div(inputMax.sub(inputMin))
  let normalisedOutput = outputTensor.sub(outputMin).div(outputMax.sub(outputMin))
  return { input: normalisedInput, output: normalisedOutput, inputMax, inputMin, outputMax, outputMin }
})
//------------------------------------------------------------------------------------------------------TRAIN
let x_train = tensorData.input
let y_train = tensorData.output
let calculate = true
window.onload = () => {
  let button = document.getElementById('stop')
  button.addEventListener('click', () => {
    button.style.display = 'none'
    calculate = false
  })
}
;(async () => {
  let time = new Date().getTime()
  while (calculate) {
    let res = await model.fit(x_train, y_train, { batchSize: 32, epochs: 50 })
    console.log(res.history.loss[0])
    document.getElementById('accuracy').innerHTML = res.history.loss[0].toFixed(7)
    let seconds = Math.round((new Date().getTime() - time) / 1000)
    document.getElementById('timer').innerHTML = seconds
    if (seconds >= 200) break
  }
})().then(() => {
  //-------------------------------------------------------------------------------------------------------TEST
  let arrayToTest = [[1, 2], [1, 3], [1, 4], [100, 8], [2, 3], [2, 4], [5, 5]]
  let testTensor = tf.tensor(arrayToTest)
  let normalisedTestTensor = testTensor.sub(tensorData.inputMin).div(tensorData.inputMax.sub(tensorData.inputMin))
  const preds = model.predict(normalisedTestTensor)
  const unNormPreds = preds.mul(tensorData.outputMax.sub(tensorData.outputMin)).add(tensorData.outputMin)
  unNormPreds.dataSync().forEach((predictedOutput, i) => {
    let realInput = arrayToTest[i]
    let realOutput = arrayToTest[i][0] * arrayToTest[i][1]

    var table = document.getElementById('result')
    var row = table.insertRow(1)
    var cell1 = row.insertCell(0)
    var cell2 = row.insertCell(1)
    var cell3 = row.insertCell(2)
    var cell4 = row.insertCell(3)
    cell1.innerHTML = realInput
    cell2.innerHTML = realOutput.toFixed(2)
    cell3.innerHTML = predictedOutput.toFixed(2)
    cell4.innerHTML = Math.abs(((predictedOutput - realOutput) / predictedOutput) * 100).toFixed(2) + '%'
  })
  document.getElementById('table').style.display = 'block'
})

---data.js
let data = {
  input: [4, 3, 23, 4, 3, 3, 3, 5, 4, 34, 43, 3, 3, 6, 6, 542, 3, 7, 76, 8, 6, 76, 7],
  input2: [6, 5, 32, 1, 5, 7, 7, 3, 43, 3, 0, 9, 8, 3, 1, 3, 3, 7, 7, 5, 8, 7, 4],
  output: [24, 15, 736, 4, 15, 21, 21, 15, 172, 102, 0, 27, 24, 18, 6, 162, 9, 49, 532, 40, 48, 532, 28]
}

---index.html
<html>
  <head>
    <style>
      #center {
        padding: 2rem;
        text-align: center;
        position: absolute;
        left: 50%;
        margin-top: 50px;
        border: 1px solid black;
        border-radius: 1rem;
      }
      â€‹ table,
      td,
      th {
        border: 1px solid black;
        padding: 10px;
      }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.12.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis@1.0.2/dist/tfjs-vis.umd.min.js"></script>

    <script src="data.js" type="text/javascript"></script>
    <script src="main.js" type="text/javascript"></script>
  </head>
  <body>
    <div id="center">
      <h2>ACCURACY:</h2>
      <h3 id="accuracy"></h3>
      <h2>ELAPSED TIME:</h2>
      <h3 id="timer"></h3>
      <button id="stop">STOP</button>
      <div id="table" style="display:none">
        <h2>RESULT:</h2>
        <table id="result">
          <tr>
            <th>input</th>
            <th>expected</th>
            <th>predicted</th>
            <th>difference</th>
          </tr>
        </table>
      </div>
    </div>
  </body>
</html>
